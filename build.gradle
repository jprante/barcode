plugins {
    id "org.sonarqube" version "2.6.1"
    id "io.codearte.nexus-staging" version "0.11.0"
}

printf "Host: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGradle: %s Groovy: %s Java: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        gradle.gradleVersion,
        GroovySystem.getVersion(),
        JavaVersion.current()

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: "io.codearte.nexus-staging"

repositories {
    mavenCentral()
}

configurations {
    asciidoclet
    wagon
}

dependencies {
    testCompile "junit:junit:${project.property('junit.version')}"
    testCompile "com.google.zxing:javase:${project.property('zxing.version')}"
    testCompile "org.reflections:reflections:${project.property('reflections.version')}"
    wagon "org.apache.maven.wagon:wagon-ssh:${project.property('wagon-ssh.version')}"
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

clean {
    delete 'out'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
}

artifacts {
    archives sourcesJar, javadocJar
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

apply from: 'gradle/ext.gradle'
apply from: 'gradle/publish.gradle'
apply from: 'gradle/sonarqube.gradle'
